C51 COMPILER V9.60.7.0   B                                                                 12/31/2024 19:20:18 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE B
OBJECT MODULE PLACED IN .\Objects\B.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE B.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\B.lst) 
                    -TABS(2) OBJECT(.\Objects\B.obj)

line level    source

   1          #include <regx51.h>
   2          void print_msg(char *);  // Function to print a string to the LCD
   3          void write(char, int);   // Function to send commands or data to the LCD
   4          void delay(unsigned int); // Function to introduce delay
   5          
   6          char receive_value;            // Variable to store received data
   7          char *Sm = "smile";
   8          int Index = 0;
   9          int re = 0;
  10          int PP;
  11          int i;
  12          
  13          // UART initialization function
  14          void init_uart(void)
  15          {
  16   1          SCON = 0x50;               // Set UART mode 1 (8-bit UART)
  17   1          TMOD = 0x20;               // Set Timer 1 to mode 2 (8-bit auto-reload)
  18   1          TH1 = 0xE6;                // Set baud rate to 1200
  19   1          TR1 = 1;                   // Start Timer 1
  20   1      }
  21          
  22          void main()
  23          {
  24   1          init_uart();               // Initialize UART
  25   1          P1_0 = 0;
  26   1          delay(1000000);
  27   1          write(0x38, 0); // Set LCD to 8-bit mode, 2-line display, 5x7 dot format
  28   1          write(0x0F, 0); // Turn on display, enable cursor, set cursor to blink
  29   1          write(0x06, 0); // Increment cursor position after data write
  30   1        
  31   1           // Set CGRAM address for custom character (start at 0x40 for the first custom character)
  32   1          write(0x40, 0);
  33   1          
  34   1          // Write 8 rows of pixel data for the custom character
  35   1          write(0x00, 1);
  36   1          write(0x0A, 1);
  37   1          write(0x1F, 1);
  38   1          write(0x1F, 1);
  39   1          write(0x0E, 1);
  40   1          write(0x04, 1);
  41   1          write(0x00, 1);
  42   1          write(0x00, 1); // Row 8 (cursor): Leave this row empty
  43   1        
  44   1          write(0x48, 0);
  45   1        
  46   1          write(0x00, 1);
  47   1          write(0x0A, 1);
  48   1          write(0x0A, 1);
  49   1          write(0x00, 1);
  50   1          write(0x11, 1);
  51   1          write(0x0E, 1);
  52   1          write(0x00, 1);
  53   1          write(0x00, 1); 
  54   1        
C51 COMPILER V9.60.7.0   B                                                                 12/31/2024 19:20:18 PAGE 2   

  55   1          write(0x01, 0); // Clear display and return the cursor to home position
  56   1          write(0x80, 0); // Set DDRAM address to 0x00 (beginning of the first line)
  57   1          print_msg("               ");
  58   1          write(0x00, 1);
  59   1          write(0xC0, 0); // Set DDRAM address to 0x00 (beginning of the first line)
  60   1          
  61   1          while (1)
  62   1          {
  63   2              if (RI)                // Check the receive interrupt flag (polling method)
  64   2              {
  65   3                  RI = 0;            // Clear the receive interrupt flag
  66   3                  receive_value = SBUF; // Read the received data from the serial buffer
  67   3                  PP = receive_value;   // Display the received data on Port 2
  68   3                  write(PP, 1);
  69   3                  if(PP == 127 && Index > 0) Index--;
  70   3                  else if((PP == 13) || (48 <= PP && PP <= 57) || (65 <= PP && PP <= 90) || (97 <= PP && PP <= 122))
  71   3                  {
  72   4                      if(PP == 's' && re == 0) re++;
  73   4                      else if(PP == 'm' && re == 1) re++;
  74   4                      else if(PP == 'i' && re == 2) re++;
  75   4                      else if(PP == 'l' && re == 3) re++;
  76   4                      else if(PP == 'e' && re == 4)
  77   4                      {
  78   5                          write(0x38, 0); // Set LCD to 8-bit mode, 2-line display, 5x7 dot format
  79   5                          write(0x0F, 0); // Turn on display, enable cursor, set cursor to blink
  80   5                          write(0x06, 0); // Increment cursor position after data write
  81   5                          write(0x01, 0); // Clear display and return the cursor to home position
  82   5                          write(0x80, 0); // Set DDRAM address to 0x00 (beginning of the first line)
  83   5                          write(0x01, 1);
  84   5                          write(0xC0, 0);
  85   5                      }
  86   4                      else re = 0;
  87   4                  }
  88   3              }
  89   2          }
  90   1      }
  91          
  92          // Function to display a string on the LCD
  93          void print_msg(char *msg) 
  94          {
  95   1          for (; *msg != '\0'; msg++) // Iterates through the character array
  96   1              write(*msg, 1);         // Sends characters to the LCD in "data mode" (RS=1)
  97   1      }
  98          
  99          // Function to send a command or data to the LCD
 100          void write(char cmd, int rs_value) 
 101          {
 102   1          P2 = cmd;        // Set command or data (cmd) on Port 1
 103   1          P1_6 = rs_value; // Set RS (Register Select): 0 for command, 1 for data
 104   1          P1_7 = 1;        // ENABLE high to latch data into the LCD
 105   1          delay(100);      // Delay to stabilize the ENABLE signal
 106   1          P1_7 = 0;        // ENABLE low to complete the operation
 107   1      }
 108          
 109          // Function to introduce delay
 110          void delay(unsigned int i) 
 111          {
 112   1          while (i--); // Simple delay loop; time depends on clock speed
 113   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.60.7.0   B                                                                 12/31/2024 19:20:18 PAGE 3   

   CODE SIZE        =    650    ----
   CONSTANT SIZE    =     22    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
