C51 COMPILER V9.60.7.0   C                                                                 12/31/2024 16:10:57 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE C
OBJECT MODULE PLACED IN .\Objects\C.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE C.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\C.lst) 
                    -TABS(2) OBJECT(.\Objects\C.obj)

line level    source

   1          #include <regx51.h> // Include the 8051 microcontroller header file
   2          
   3          void print_msg(char *);  // Function to print a string to the LCD
   4          void write(char, int);   // Function to send commands or data to the LCD
   5          void delay(unsigned int); // Function to introduce delay
   6          
   7          void main() 
   8          {
   9   1          P1_0 = 0;
  10   1          delay(1000000);
  11   1          write(0x38, 0); // Set LCD to 8-bit mode, 2-line display, 5x7 dot format
  12   1          write(0x0F, 0); // Turn on display, enable cursor, set cursor to blink
  13   1          write(0x06, 0); // Increment cursor position after data write
  14   1          write(0x01, 0); // Clear display and return the cursor to home position
  15   1          write(0x80, 0); // Set DDRAM address to 0x00 (beginning of the first line)
  16   1          while (1) // Infinite loop to keep the program runningwhile(1)
  17   1          {
  18   2              delay(50000);
  19   2              if(P0 < 130)
  20   2              {
  21   3                  write(0x38, 0); // Set LCD to 8-bit mode, 2-line display, 5x7 dot format
  22   3                  write(0x0F, 0); // Turn on display, enable cursor, set cursor to blink
  23   3                  write(0x06, 0); // Increment cursor position after data write
  24   3                  write(0x01, 0); // Clear display and return the cursor to home position
  25   3                  write(0x80, 0); // Set DDRAM address to 0x00 (beginning of the first line)
  26   3                  print_msg("LOW"); // Display the string "Hello, world!" on the LCD
  27   3              } 
  28   2              else 
  29   2              {
  30   3                  write(0x38, 0); // Set LCD to 8-bit mode, 2-line display, 5x7 dot format
  31   3                  write(0x0F, 0); // Turn on display, enable cursor, set cursor to blink
  32   3                  write(0x06, 0); // Increment cursor position after data write
  33   3                  write(0x01, 0); // Clear display and return the cursor to home position
  34   3                  write(0x80, 0); // Set DDRAM address to 0x00 (beginning of the first line)
  35   3                  print_msg("HIGH");
  36   3              }
  37   2              if(P0 >= 250)
  38   2              {
  39   3                  write(0xC0, 0);
  40   3                  print_msg("finish");
  41   3              }
  42   2          }
  43   1      }
  44          
  45          // Function to display a string on the LCD
  46          void print_msg(char *msg) 
  47          {
  48   1          for (; *msg != '\0'; msg++) // Iterates through the character array
  49   1              write(*msg, 1);         // Sends characters to the LCD in "data mode" (RS=1)
  50   1      }
  51          
  52          // Function to send a command or data to the LCD
  53          void write(char cmd, int rs_value) 
  54          {
C51 COMPILER V9.60.7.0   C                                                                 12/31/2024 16:10:57 PAGE 2   

  55   1          P2 = cmd;        // Set command or data (cmd) on Port 1
  56   1          P1_6 = rs_value; // Set RS (Register Select): 0 for command, 1 for data
  57   1          P1_7 = 1;        // ENABLE high to latch data into the LCD
  58   1          delay(100);      // Delay to stabilize the ENABLE signal
  59   1          P1_7 = 0;        // ENABLE low to complete the operation
  60   1      }
  61          
  62          // Function to introduce delay
  63          void delay(unsigned int i) 
  64          {
  65   1          while (i--); // Simple delay loop; time depends on clock speed
  66   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    242    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
